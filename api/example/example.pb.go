// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gitlab.sz.sensetime.com/viper/resource-allocator/pb/example.proto

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	gitlab.sz.sensetime.com/viper/resource-allocator/pb/example.proto

It has these top-level messages:
	ResourceResponse
	ListNodesRequest
	ListNodesResponse
	ListResourcesRequest
	ListResourcesResponse
*/
package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import sensetime_viper_resource_allocator "cluster-balance/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResourceResponse struct {
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *ResourceResponse) Reset()                    { *m = ResourceResponse{} }
func (m *ResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*ResourceResponse) ProtoMessage()               {}
func (*ResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ResourceResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type ListNodesRequest struct {
}

func (m *ListNodesRequest) Reset()                    { *m = ListNodesRequest{} }
func (m *ListNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNodesRequest) ProtoMessage()               {}
func (*ListNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ListNodesResponse struct {
	Specs []*sensetime_viper_resource_allocator.NodeSpec `protobuf:"bytes,1,rep,name=specs" json:"specs,omitempty"`
}

func (m *ListNodesResponse) Reset()                    { *m = ListNodesResponse{} }
func (m *ListNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNodesResponse) ProtoMessage()               {}
func (*ListNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListNodesResponse) GetSpecs() []*sensetime_viper_resource_allocator.NodeSpec {
	if m != nil {
		return m.Specs
	}
	return nil
}

type ListResourcesRequest struct {
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *ListResourcesRequest) Reset()                    { *m = ListResourcesRequest{} }
func (m *ListResourcesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListResourcesRequest) ProtoMessage()               {}
func (*ListResourcesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListResourcesRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type ListResourcesResponse struct {
	Specs []*sensetime_viper_resource_allocator.ResourceSpec `protobuf:"bytes,1,rep,name=specs" json:"specs,omitempty"`
}

func (m *ListResourcesResponse) Reset()                    { *m = ListResourcesResponse{} }
func (m *ListResourcesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResourcesResponse) ProtoMessage()               {}
func (*ListResourcesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListResourcesResponse) GetSpecs() []*sensetime_viper_resource_allocator.ResourceSpec {
	if m != nil {
		return m.Specs
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceResponse)(nil), "sensetime.viper.resource_allocator.example.ResourceResponse")
	proto.RegisterType((*ListNodesRequest)(nil), "sensetime.viper.resource_allocator.example.ListNodesRequest")
	proto.RegisterType((*ListNodesResponse)(nil), "sensetime.viper.resource_allocator.example.ListNodesResponse")
	proto.RegisterType((*ListResourcesRequest)(nil), "sensetime.viper.resource_allocator.example.ListResourcesRequest")
	proto.RegisterType((*ListResourcesResponse)(nil), "sensetime.viper.resource_allocator.example.ListResourcesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ManagerService service

type ManagerServiceClient interface {
	AddResource(ctx context.Context, in *sensetime_viper_resource_allocator.ResourceSpec, opts ...grpc.CallOption) (*ResourceResponse, error)
	RemoveResource(ctx context.Context, in *sensetime_viper_resource_allocator.ResourceSpec, opts ...grpc.CallOption) (*ResourceResponse, error)
	GetResource(ctx context.Context, in *sensetime_viper_resource_allocator.ResourceSpec, opts ...grpc.CallOption) (*sensetime_viper_resource_allocator.ResourceSpec, error)
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	GetNode(ctx context.Context, in *sensetime_viper_resource_allocator.NodeSpec, opts ...grpc.CallOption) (*sensetime_viper_resource_allocator.NodeSpec, error)
}

type managerServiceClient struct {
	cc *grpc.ClientConn
}

func NewManagerServiceClient(cc *grpc.ClientConn) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) AddResource(ctx context.Context, in *sensetime_viper_resource_allocator.ResourceSpec, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/sensetime.viper.resource_allocator.example.ManagerService/AddResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) RemoveResource(ctx context.Context, in *sensetime_viper_resource_allocator.ResourceSpec, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/sensetime.viper.resource_allocator.example.ManagerService/RemoveResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetResource(ctx context.Context, in *sensetime_viper_resource_allocator.ResourceSpec, opts ...grpc.CallOption) (*sensetime_viper_resource_allocator.ResourceSpec, error) {
	out := new(sensetime_viper_resource_allocator.ResourceSpec)
	err := grpc.Invoke(ctx, "/sensetime.viper.resource_allocator.example.ManagerService/GetResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := grpc.Invoke(ctx, "/sensetime.viper.resource_allocator.example.ManagerService/ListResources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := grpc.Invoke(ctx, "/sensetime.viper.resource_allocator.example.ManagerService/ListNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetNode(ctx context.Context, in *sensetime_viper_resource_allocator.NodeSpec, opts ...grpc.CallOption) (*sensetime_viper_resource_allocator.NodeSpec, error) {
	out := new(sensetime_viper_resource_allocator.NodeSpec)
	err := grpc.Invoke(ctx, "/sensetime.viper.resource_allocator.example.ManagerService/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ManagerService service

type ManagerServiceServer interface {
	AddResource(context.Context, *sensetime_viper_resource_allocator.ResourceSpec) (*ResourceResponse, error)
	RemoveResource(context.Context, *sensetime_viper_resource_allocator.ResourceSpec) (*ResourceResponse, error)
	GetResource(context.Context, *sensetime_viper_resource_allocator.ResourceSpec) (*sensetime_viper_resource_allocator.ResourceSpec, error)
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	GetNode(context.Context, *sensetime_viper_resource_allocator.NodeSpec) (*sensetime_viper_resource_allocator.NodeSpec, error)
}

func RegisterManagerServiceServer(s *grpc.Server, srv ManagerServiceServer) {
	s.RegisterService(&_ManagerService_serviceDesc, srv)
}

func _ManagerService_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sensetime_viper_resource_allocator.ResourceSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensetime.viper.resource_allocator.example.ManagerService/AddResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).AddResource(ctx, req.(*sensetime_viper_resource_allocator.ResourceSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_RemoveResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sensetime_viper_resource_allocator.ResourceSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).RemoveResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensetime.viper.resource_allocator.example.ManagerService/RemoveResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).RemoveResource(ctx, req.(*sensetime_viper_resource_allocator.ResourceSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sensetime_viper_resource_allocator.ResourceSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensetime.viper.resource_allocator.example.ManagerService/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetResource(ctx, req.(*sensetime_viper_resource_allocator.ResourceSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensetime.viper.resource_allocator.example.ManagerService/ListResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensetime.viper.resource_allocator.example.ManagerService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sensetime_viper_resource_allocator.NodeSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensetime.viper.resource_allocator.example.ManagerService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetNode(ctx, req.(*sensetime_viper_resource_allocator.NodeSpec))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensetime.viper.resource_allocator.example.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddResource",
			Handler:    _ManagerService_AddResource_Handler,
		},
		{
			MethodName: "RemoveResource",
			Handler:    _ManagerService_RemoveResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ManagerService_GetResource_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _ManagerService_ListResources_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _ManagerService_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _ManagerService_GetNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.sz.sensetime.com/viper/resource-allocator/pb/example.proto",
}

func init() {
	proto.RegisterFile("gitlab.sz.sensetime.com/viper/resource-allocator/pb/example.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0x19, 0xc5, 0x86, 0xcc, 0xd2, 0x98, 0x0e, 0xad, 0x2d, 0x8b, 0x42, 0xd9, 0x53, 0x89,
	0x3a, 0xa3, 0xf5, 0x26, 0x11, 0x4c, 0x0f, 0x16, 0xa1, 0x7a, 0xd8, 0x1e, 0x04, 0x2f, 0x61, 0xb2,
	0xfb, 0xb2, 0x0c, 0xec, 0xce, 0x8c, 0x3b, 0xd3, 0x45, 0x94, 0x5e, 0xbc, 0x7b, 0xf2, 0xa8, 0x5f,
	0x40, 0xfc, 0x38, 0x7e, 0x05, 0x3f, 0x88, 0xec, 0x64, 0x77, 0x4d, 0x6a, 0x84, 0x4c, 0x73, 0xf0,
	0x98, 0xc9, 0xfb, 0x3c, 0xef, 0xef, 0xdd, 0xf7, 0x0f, 0x9e, 0x64, 0xc2, 0xe6, 0x7c, 0x46, 0xcd,
	0x07, 0x6a, 0x40, 0x1a, 0xb0, 0xa2, 0x00, 0x9a, 0xa8, 0x82, 0x55, 0x42, 0x43, 0xc9, 0x4a, 0x30,
	0xea, 0xa2, 0x4c, 0xe0, 0x21, 0xcf, 0x73, 0x95, 0x70, 0xab, 0x4a, 0xa6, 0x67, 0x0c, 0xde, 0xf3,
	0x42, 0xe7, 0x40, 0x75, 0xa9, 0xac, 0x22, 0xa3, 0x3f, 0x42, 0x27, 0xa2, 0xad, 0x68, 0xda, 0x89,
	0x68, 0xa3, 0x08, 0xef, 0x66, 0x4a, 0x65, 0x39, 0x30, 0xae, 0x05, 0xe3, 0x52, 0x2a, 0xcb, 0xad,
	0x50, 0xd2, 0xcc, 0x9d, 0xc2, 0xb3, 0xeb, 0xc0, 0xfc, 0xfd, 0x3a, 0x77, 0x8b, 0xee, 0xe3, 0x61,
	0xdc, 0xfc, 0x17, 0x83, 0xd1, 0x4a, 0x1a, 0x20, 0xfb, 0xb8, 0x27, 0x55, 0x0a, 0x53, 0x91, 0x1e,
	0xa0, 0x43, 0x74, 0xd4, 0x8f, 0xb7, 0xea, 0x9f, 0x2f, 0xd3, 0x88, 0xe0, 0xe1, 0x99, 0x30, 0xf6,
	0xb5, 0x4a, 0xc1, 0xc4, 0xf0, 0xee, 0x02, 0x8c, 0x8d, 0xde, 0xe0, 0x9d, 0x85, 0xb7, 0xc6, 0xe1,
	0x04, 0xdf, 0x32, 0x1a, 0x12, 0x73, 0x80, 0x0e, 0x6f, 0x1e, 0x05, 0xc7, 0x0f, 0xe8, 0x1a, 0xd5,
	0xd7, 0x0e, 0xe7, 0x1a, 0x92, 0x78, 0x2e, 0x8d, 0x18, 0xde, 0xad, 0x8d, 0x5b, 0xba, 0x36, 0xe1,
	0xbf, 0xe9, 0xa6, 0x78, 0xef, 0x8a, 0xa0, 0xa1, 0x79, 0xb1, 0x4c, 0xf3, 0x68, 0x1d, 0x9a, 0xd6,
	0x65, 0x81, 0xe8, 0xf8, 0x7b, 0x0f, 0x0f, 0x5e, 0x71, 0xc9, 0x33, 0x28, 0xcf, 0xa1, 0xac, 0x44,
	0x02, 0xe4, 0x1b, 0xc2, 0xc1, 0x24, 0x4d, 0xdb, 0x68, 0xe2, 0xed, 0x1d, 0x8e, 0xe9, 0xfa, 0x93,
	0x41, 0xaf, 0xb6, 0x2a, 0xba, 0xf7, 0xe9, 0xe7, 0xaf, 0x2f, 0x37, 0xf6, 0x23, 0xc2, 0xaa, 0xc7,
	0x5d, 0x93, 0x0d, 0xfb, 0x28, 0xd2, 0xcb, 0xa7, 0x68, 0x54, 0xe3, 0x0d, 0x62, 0x28, 0x54, 0x05,
	0xff, 0x8d, 0x30, 0x74, 0x84, 0xbb, 0xa3, 0x15, 0x84, 0xe4, 0x33, 0xc2, 0xc1, 0x29, 0xd8, 0x0d,
	0xd8, 0xbc, 0x15, 0x2d, 0x0f, 0x59, 0xc5, 0xf3, 0x03, 0xe1, 0xed, 0xa5, 0x11, 0x22, 0xcf, 0x7d,
	0x6a, 0x5f, 0x35, 0xae, 0xe1, 0x64, 0x03, 0x87, 0xe6, 0x13, 0xee, 0x39, 0xe4, 0xdb, 0x64, 0x7b,
	0x09, 0x99, 0x7c, 0x45, 0xb8, 0xdf, 0xad, 0x1e, 0x19, 0xfb, 0xe6, 0x59, 0xdc, 0xe2, 0xf0, 0xd9,
	0x35, 0xd5, 0x0d, 0xe1, 0x8e, 0x23, 0x0c, 0x48, 0xbf, 0x26, 0x94, 0x8e, 0xe7, 0x12, 0xf7, 0x4e,
	0xc1, 0x85, 0x11, 0xaf, 0xf5, 0x0f, 0xbd, 0xa2, 0xa3, 0x3b, 0x2e, 0xf3, 0x90, 0x0c, 0xba, 0xcc,
	0xae, 0x95, 0x27, 0x12, 0xd7, 0x37, 0xd1, 0xa3, 0xaa, 0xb7, 0x63, 0xef, 0xbb, 0x5a, 0xdf, 0xe7,
	0x46, 0x3d, 0xdb, 0x72, 0xe7, 0xf4, 0xc9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0xb8, 0xdc,
	0x13, 0x2b, 0x06, 0x00, 0x00,
}
